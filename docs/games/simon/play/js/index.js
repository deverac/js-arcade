//find minimum of width/length of window to make a square a svg
var minlength = Math.min(window.innerWidth,window.innerHeight);
var mainSquareLength = minlength*0.9;//square tangent to circle
var baseRadius=mainSquareLength/2;//radius of outter circle all other data based on this dim
var mainSwitch = false;//toggle (blue) switch
var gameSwitch = false;//red switch
var strictSwitch = false;//yellow switch
var inMemory=[];//array currently in the computer buffer
var memoryIndex=0;//index used to light buttons
var wincount=0;//=levels finished by player
//3 timer IDs
var computerTimerID;//for adjusting frequency of lights generated by computer
var computerFlashID;//for adjusting length of time light is on
var playerResponseID;//for processing player response time

var playerTurn=false; // on when it is the player's turn
var playerPressCounter=0;//button presses counted for player during each trial
var playerHits=[];//array contains correct button presses by player

var soundObject={//sound file location object
  button0:new Audio("sounds/simonSound1.mp3"),
  button1:new Audio("sounds/simonSound2.mp3"),
  button2:new Audio("sounds/simonSound3.mp3"),
  button3:new Audio("sounds/simonSound4.mp3"),
  fail:new Audio("sounds/142608_autistic-lucario_error.wav"),
  victory:new Audio("sounds/395482__chilljeremy__8-bit-victory-sound.wav")
};
function gameModule(calling){//main game module
//the main game module, possible calls:
  //console.log("calling = " + calling + " gameSwitch = " + gameSwitch)
	//this a call back function that executes while waiting on player response

  switch(calling){
    case 'player'://called when computer is done showing pattern to mimic
      //console.log(inMemory)
      if(gameSwitch){
        playerTurn=true;
        //adjust buttons to pointer
        for(var i=0;i<4;i++){$("#button"+i).css({"cursor": "pointer"});}
        //console.log("GO")

        var responseIntervalCounter =0;//counter used to time player
        var responseInterval = 1000;
        var capturePlayerPush=playerHits.length;//used to track user pushes on the buttons
        //Timer countdown for user to submit answer, see playerCallback()
        playerResponseID = setInterval(playerCallback,responseInterval);
    	function playerCallback(){
    		//if a correct button has been pressed renew time out
    	    if(capturePlayerPush!==playerHits.length){responseIntervalCounter=0;}
    	    capturePlayerPush=playerHits.length;
    	    responseIntervalCounter+=responseInterval;//otherwise increment
    	    if (responseIntervalCounter===5000){//if 5secs is up then clear and redisplay sequence
    	      responseIntervalCounter=0;
    	      clearInterval(playerResponseID);
    	      memoryFail();//same function that runs when user fails on the sequence
    	    }
    	  }
      }
      break;
    case 'reset'://resets game
      clearBoard();
      addMemory();
      computerMove();
      break;
  }
}
function clearBoard(){//for a restart clears everything
  inMemory=[];
  memoryIndex=0;
  wincount=0;
  clearInterval(computerTimerID);
  clearTimeout(computerFlashID);
  clearInterval(playerResponseID);

  playerTurn=false;
  playerPressCounter=0;
  playerHits=[];
  for(var i=0;i<4;i++){inactiveButton("button"+i);}
  $("#levelText").empty();
}
function playerMove(){//processes the last button pressed by user
  if(!playerTurn){return;}//for safety
  var lastPlayerPress = playerHits[playerHits.length-1];
  var computerPos=inMemory[playerPressCounter-1];
  //compare last button pressed with the computers buffer at the same index
  //note playerPressCounter is indexed every button push
  if(lastPlayerPress!==computerPos){
    //if mismatch found just call fail routine
    memoryFail();
  }
  else{//otherwise
	//first check if all the buffer has been correctly duplicated
    if (playerHits.length===inMemory.length){
      //if so increment computer buffer  and restart process
      playerHits=[];
      playerPressCounter=0;
      addMemory();
      computerMove();
    }
    //if not player needs to continue pressing
  }
}
function computerMove(){//computer's turn to display what is in the buffer
  //change mouse cursor on button hover to default, user can not press right now
  for(var i=0;i<4;i++){$("#button"+i).css({"cursor": "default"});}
  clearInterval(playerResponseID);//ensure player wait timer has been cleaned
  playerTurn=false;
  var flashInterval;
  //adjust squence display time based on performance (see instructions)
  if (wincount>=13){flashInterval=600;}
  else if(wincount>=9){flashInterval=700;}
  else if(wincount>=5){flashInterval=800;}
  else {flashInterval=1000;}
  //this timer is for the interval between each element of the computer buffer's display
  computerTimerID = setInterval(computerIntervalCallback,flashInterval);
  //this function is called on each interval
  function computerIntervalCallback(){
    if(!gameSwitch){
      clearInterval(computerTimerID);
      clearTimeout(computerFlashID);
    }
    //if current position of buffer index has reached limit terminate the computer move
    if(memoryIndex>(inMemory.length-1)){
      memoryIndex=0;
      clearInterval(computerTimerID);
      gameModule('player');
    }
    else{//otherwise
      //console.log("Now running memory index " + memoryIndex + " with active button= " + inMemory[memoryIndex])
      activeButton(inMemory[memoryIndex]);//show light
      soundObject[inMemory[memoryIndex]].play();//play sound
      //set a timer for the duration of each flash, note timer must be less than the interval timer
      computerFlashID = setTimeout(computerTimerCallback,(flashInterval/2));
      //when duration of flash is up..
      function computerTimerCallback(){
        inactiveButton(inMemory[memoryIndex]);//turn lights off
        memoryIndex++; // up bufffer index
        clearTimeout(computerFlashID);
      }
    }

  }
}
function addMemory(){
  //adds to the buffer and checks also if user has won the game
  wincount++;
  if (wincount===20){//user won
    $("#levelText").empty();
    $("#levelText").append("00");
    soundObject['victory'].play();//victory sound
    var flashlength = 200;//flash on screen
    $("#levelText").fadeIn(flashlength).fadeOut(flashlength).fadeIn(flashlength).fadeOut(flashlength).fadeIn(flashlength).fadeOut(flashlength).fadeIn(flashlength).fadeOut(flashlength).fadeIn(flashlength);
    $( "#levelText" ).fadeIn( "slow", function(){gameModule('reset');});
  }
  else{//if no win increment buffer by a random button selection
	  var randSelect = "button" + [0,1,2,3][Math.floor(Math.random() * 4)];
	  inMemory.push(randSelect);
	  levelText(wincount); //refresh screen display
  }
}
function memoryFail(){
  //called when user misses sequence or takes too long to respond
  $("#levelText").empty();
  $("#levelText").append("!!");//display screen
  soundObject['fail'].play();//play sound
  var flashlength = 200;//use flash animation effect
 $("#levelText").fadeIn(flashlength).fadeOut(flashlength).fadeIn(flashlength).fadeOut(flashlength).fadeIn(flashlength);
  $( "#levelText" ).fadeIn( "slow", function() {
	//when animation is over
    if(!strictSwitch){//do a soft reset if strict mode is off
      levelText(wincount);
      playerHits=[];
      playerPressCounter=0;
      clearInterval(computerTimerID);
      clearTimeout(computerFlashID);
      clearInterval(playerResponseID);
      computerMove();
    }
    else{//otherwise do a hard reset
      gameModule('reset');
    }
  });
}
function levelText(level){
  //updates display screen
  var respFontsize = (mainSquareLength*0.06).toString()+"px";
  var levelTxt=SVG('text');
  $(levelTxt).attr("id","levelText")
                   .attr("x",baseRadius-(baseRadius*0.28))
                   .attr("y",baseRadius+(baseRadius*0.1))
                   .attr("font-family","Orbitron-Regular")
                   .attr("fill","red")
                   .attr("font-size",respFontsize)
                   .attr("text-anchor","middle")

  if(level===1||level==="-->"){$("#parent").append(levelTxt);}//for new game must append to svg
  $("#levelText").empty();
  if(level<10){$("#levelText").append("0"+level);}//format digitis and append
  else{$("#levelText").append(level);}

}

function activeButton(button){//lights a button
  if(!mainSwitch){return;}
  switch(button){
    case "button0":
      $("#" + button).css({"fill": "#f4959a"});
      break;
    case "button1":
      $("#" + button).css({"fill": "#89bdf4"});
      break;
    case "button2":
      $("#" + button).css({"fill": "#eddc95"});
      break;
    case "button3":
      $("#" + button).css({"fill": "#a9f9cd"});
      break;
  }
}
function inactiveButton(button){//turns lights off a button
  switch(button){
    case "button0":
      $("#" + button).css({"fill": "#9F0F17"});
      break;
    case "button1":
      $("#" + button).css({"fill": "#094A8F"});
      break;
    case "button2":
      $("#" + button).css({"fill": "#CCA707"});
      break;
    case "button3":
      $("#" + button).css({"fill": "#00A74A"});
      break;
  }

}
function playerPressDown(button){//on a press down of any of the main buttons
  if(!playerTurn){return;}//only works if it is the player's turn
  else{
    activeButton(button);
  }
}
function playerPressUp(button){//on a press up of any of the main buttons
  //note : used to have player results tallied after button down but then swiitched to
  //button up as it seems to work slightly better this way
  if(!playerTurn){return;}//only works if it is the player's turn
  else{
    inactiveButton(button);//turn light off
    soundObject[button].play();
    playerPressCounter++;//same index used to match with computer buffer
    playerHits.push(button);//will be updated so long as hits are succesful (look above)
    playerMove();//process pushed button
  }
}
function mainToggle(){//entire game switch toggle
  if(mainSwitch===false){
    mainSwitch=true;
    levelText("-->")
    $("#switchOff").css({"visibility": "hidden"});
    $("#switchOn").css({"visibility": "visible"});
  }
  else{
    clearBoard();
    mainSwitch=false;
    gameSwitch=false;
    strictSwitch = false;
    $("#switchOff").css({"visibility": "visible"});
    $("#switchOn").css({"visibility": "hidden"});
    $("#strictLight").css({"fill": "black"});
  }
}
function buttonDown(button){//this is for the control panel buttons
  //shadow on/off effect gives illusion of button being pressed
  $("#" + button +".circularButtons").css({"filter": "drop-shadow(0px 0px 0px)"});
  if(!mainSwitch){return;}//all buttons inactive unless mainswitch on
  switch(button){
    case "strictButton"://for strict button do
      if(strictSwitch){
        strictSwitch=false;
        $("#strictLight").css({"fill": "black"});
      }
      else{
        strictSwitch=true;
        $("#strictLight").css({"fill": "red"});
      }
      break;
    case "startButton"://for game button do
      gameSwitch=true;
      gameModule("reset");
      break;
               }
}
function buttonUp(button){//for control button up
  //add shadow again
  var dropShadowConfig=(baseRadius/45).toString() + "px " + (baseRadius/45).toString() + "px " + (baseRadius/45).toString() + "px black)";
  $(".circularButtons").css({"filter": "drop-shadow("+dropShadowConfig})
}
function drawControlPanel(){
  //draws the control panel portion of the board
  var screen = SVG('rect');
  $(screen).attr("id","screen")
                   .attr("x",baseRadius-(baseRadius*0.4))
                   .attr("y",baseRadius-(baseRadius*0.05))
                   .attr("rx","2%")
                   .attr("ry","2%")
                   .attr("width",baseRadius*0.25)
                   .attr("height",baseRadius*0.2)
                   .attr("fill","black")
                   .attr("stroke-width","1");
  var startButton = SVG('circle');
  $(startButton).attr("id","startButton")
                .attr("cx",baseRadius)
                .attr("cy",baseRadius+(baseRadius*0.075))
                .attr("r",(baseRadius/20))
                .attr("stroke","#333333")
                .attr("stroke-width",(baseRadius/60))
                .attr("fill","red")
                .attr("class","circularButtons")
                .attr("cursor","pointer")
                .attr("onmousedown","buttonDown(\"startButton\")")
                .attr("onmouseup","buttonUp(\"startButton\")");
  var strictButton = SVG('circle');
  $(strictButton).attr("id","strictButton")
                .attr("cx",baseRadius+(baseRadius*.25))
                .attr("cy",baseRadius+(baseRadius*.075))
                .attr("r",(baseRadius/20))
                .attr("stroke","#333333")
                .attr("stroke-width",(baseRadius/60))
                .attr("fill","yellow")
                .attr("class","circularButtons")
                .attr("cursor","pointer")
                .attr("onmousedown","buttonDown(\"strictButton\")")
                .attr("onmouseup","buttonUp(\"strictButton\")");
 var strictLight = SVG('circle');
 $(strictLight).attr("id","strictLight")
                .attr("cx",baseRadius+(baseRadius*0.25))
                .attr("cy",baseRadius-(baseRadius*0.02))
                .attr("r",(baseRadius/50))
                .attr("stroke","black")
                .attr("stroke-width",(baseRadius/100))
                .attr("fill","black");
 var switchHolder=SVG('rect');
 $(switchHolder).attr("id","switchHolder")
                   .attr("x",baseRadius-(baseRadius*0.1))
                   .attr("y",baseRadius+(baseRadius*0.3))
                   .attr("rx","1%")
                   .attr("ry","1%")
                   .attr("width",baseRadius*0.22)
                   .attr("height",baseRadius*0.1)
                   .attr("fill","black")
                   .attr("stroke-width","1")
                   .attr("cursor","pointer")
                   .attr("onclick","mainToggle()");
  var switchOff = SVG('rect');
  $(switchOff).attr("id","switchOff")
                   .attr("x",baseRadius-(baseRadius*0.09))
                   .attr("y",baseRadius+(baseRadius*0.31))
                   .attr("rx","1%")
                   .attr("ry","1%")
                   .attr("width",baseRadius*0.1)
                   .attr("height",baseRadius*0.08)
                   .attr("fill","#3193DE")
                   .attr("stroke-width","0")
                   .attr("onclick","mainToggle()")
                   .attr("cursor","pointer");
  var switchOn = SVG('rect');
  $(switchOn).attr("id","switchOn")
                   .attr("x",baseRadius+(baseRadius*0.01))
                   .attr("y",baseRadius+(baseRadius*0.31))
                   .attr("rx","1%")
                   .attr("ry","1%")
                   .attr("width",baseRadius*.1)
                   .attr("height",baseRadius*.08)
                   .attr("fill","#3193DE")
                   .attr("stroke-width","0")
                   .attr("onclick","mainToggle()")
                   .attr("cursor","pointer");
  var respFontsize = (mainSquareLength*0.025).toString()+"px";
  var controlTextGroup=SVG('text');
  $(controlTextGroup).attr("id","controlText")
                   .attr("x",baseRadius-(baseRadius*0.37))
                   .attr("y",baseRadius+(baseRadius*.23))
                   .attr("font-family","arial")
                   .attr("font-size",respFontsize)
                   .attr("class","panelText");
  var offText=SVG('text');
  $(offText).attr("id","textOff")
                   .attr("x",baseRadius-(baseRadius*0.23))
                   .attr("y",baseRadius+(baseRadius*0.37))
                   .attr("font-family","arial")
                   .attr("font-size",respFontsize)
                   .attr("class","panelText");
  var onText=SVG('text');
  $(onText).attr("id","textOn")
                   .attr("x",baseRadius+(baseRadius*0.13))
                   .attr("y",baseRadius+(baseRadius*0.37))
                   .attr("font-family","arial")
                   .attr("font-size",respFontsize)
                   .attr("class","panelText");
  $(controlTextGroup).append("COUNT         START      STRICT");
  $(offText).append("OFF");
  $(onText).append("ON");
  $("#parent").append(screen);
  $("#parent").append(startButton);
  $("#parent").append(strictButton);
  $("#parent").append(strictLight);
  $("#parent").append(switchHolder);
  $("#parent").append(switchOff);
  $("#parent").append(switchOn);
  $("#parent").append(controlTextGroup);
  $("#parent").append(offText);
  $("#parent").append(onText);
  //easier to add/modify shadows with css after element is in place
  var dropShadowConfig=(baseRadius/45).toString() + "px " + (baseRadius/45).toString() + "px " + (baseRadius/45).toString() + "px black)";
  $(".circularButtons").css({"filter": "drop-shadow("+dropShadowConfig});
  $("#switchOn").css({"visibility": "hidden"});
  $(".panelText").css({"white-space": "pre",
                          "font-weight": "bold"});
}
function drawBoard(){
  //draws main board
  var svgConstruction = "<svg version=\"1.1\" baseProfile=\"full\" id=\"svgBoardBase\" width=" + mainSquareLength.toString() + " height=" + mainSquareLength.toString()+ " xmlns=\"http://www.w3.org/2000/svg\"></svg>";
  $('#main').append(svgConstruction);
  var group = SVG('g');
  $('svg').append(group);
  $(group).attr("id","parent");
  var baseCircle = SVG('circle');//outer circle
  $(baseCircle).attr("id","baseCircle")
               .attr("cx",baseRadius.toString())
               .attr("cy",baseRadius.toString())
               .attr("r",baseRadius.toString())
               .attr("fill","#333333");
  var innerCircle = SVG('circle');
  $(innerCircle).attr("id","innerCircle")
                .attr("cx",baseRadius.toString())
                .attr("cy",baseRadius.toString())
                .attr("r",(baseRadius/2).toString())
                .attr("fill","white");

  var constructionlines = SVG('path')
  var constLine = "M " + baseRadius + " 0 " + "L " + baseRadius + " " + mainSquareLength;
  constLine+=" M "+" 0 "+ baseRadius + "L " + mainSquareLength + " " + baseRadius;
  $(constructionlines).attr("id","constructionlines")
                      .attr("d",constLine)
                      .attr("stroke","black");//only used for construction

  //build one button then transform/rotate the rest
  var centerOffset = baseRadius/8;
  var innerArcRadius=baseRadius*0.55;
  var outerArcRadius=baseRadius*0.9;
  var arcStartX=baseRadius-innerArcRadius;
  var arcStartY=baseRadius-(centerOffset/2);
  var arcEndX= baseRadius-(centerOffset/2);
  var arcEndY= baseRadius-innerArcRadius;
  var arcRotation = 0;
  var arcLargeSweep = 0;
  var arcSweep = 0;

  var lineToX = arcEndX;
  var lineToY = baseRadius-outerArcRadius;

  var outterArcEndX =  baseRadius-outerArcRadius;
  var outterArcEndY= arcStartY;

  var pathString = "M " + arcStartX+" " + arcStartY+" " + "A " + innerArcRadius + " " + innerArcRadius + " ";
  pathString+="0 0 1 "+arcEndX+" " + arcEndY; //inner arc
  pathString+=" L " + lineToX + " " + lineToY; //first line
  pathString+=" A " + outerArcRadius + " " + outerArcRadius + " 0 0 0 " + outterArcEndX + " " + outterArcEndY;//outer arc
  pathString+=" L " + arcStartX + " " + arcStartY

  var buttonFirst = SVG('path');
  $(buttonFirst).attr("id","button0")
              .attr("d",pathString)
              .attr("transform","rotate(90 " + baseRadius + " " + baseRadius + ")")
              .attr("onmousedown","playerPressDown(\"button0\")")
              .attr("onmouseup","playerPressUp(\"button0\")")
              .attr("fill","#9F0F17")
              .attr("cursor","default");
  var buttonSecond = SVG('path');
  $(buttonSecond).attr("id","button1")
                 .attr("d",pathString)
                 .attr("transform","rotate(180 " + baseRadius + " " + baseRadius + ")")
                 .attr("onmousedown","playerPressDown(\"button1\")")
                 .attr("onmouseup","playerPressUp(\"button1\")")
                 .attr("fill","#094A8F")
                 .attr("cursor","default");
  var buttonThird = SVG('path');
  $(buttonThird).attr("id","button2")
                .attr("d",pathString)
                .attr("transform","rotate(270 " + baseRadius + " " + baseRadius + ")")
                .attr("onmousedown","playerPressDown(\"button2\")")
                .attr("onmouseup","playerPressUp(\"button2\")")
                .attr("fill","#CCA707")
                .attr("cursor","default");
  var buttonFourth = SVG('path');
  $(buttonFourth).attr("id","button3")
                 .attr("d",pathString)
                 .attr("onmousedown","playerPressDown(\"button3\")")
                 .attr("onmouseup","playerPressUp(\"button3\")")
                 .attr("fill","#00A74A")
                 .attr("cursor","default");
  var logo = SVG('text');
  var respFontsize = (mainSquareLength*0.1).toString()+"px";
  $(logo).attr("id","logo")
                 .attr("x",(baseRadius/1.7).toString())
                 .attr("y",(baseRadius/1.2).toString())
                 .attr("font-family","Bowlby One SC")
                 .attr("font-size",respFontsize);
  $(logo).append("Simon")
  var tr = SVG('text');
  respFontsize=(mainSquareLength*0.03).toString()+"px";
  $(tr).attr("id","tmark")
                 .attr("x",(baseRadius/.77).toString())
                 .attr("y",(baseRadius/1.4).toString())
                 .attr("font-family","arial")
                 .attr("font-size",respFontsize);
  $("#parent").append(baseCircle);
  $("#parent").append(innerCircle);
  //$("#parent").append(constructionlines);
  $("#parent").append(buttonFirst);
  $("#parent").append(buttonSecond);
  $("#parent").append(buttonThird);
  $("#parent").append(buttonFourth);
  $("#parent").append(logo);
  $("#parent").append(tr);
  $('#svgBoardBase').append(group);

  $("#tmark").append("&reg;")
  drawControlPanel()
}
function SVG(tag) {
	//IMPORTANT can not create svg element without this function
    return document.createElementNS('http://www.w3.org/2000/svg', tag);
}
$(document).ready(function() {
  drawBoard();
});

$(document).keydown(function(evt) {
    switch (evt.key) {
        case 'ArrowRight': playerPressDown("button0"); break; // yellow
        case 'ArrowDown':  playerPressDown("button1"); break; // blue
        case 'ArrowLeft':  playerPressDown("button2"); break; // red
        case 'ArrowUp':    playerPressDown("button3"); break; // green
        case ' ':          mainToggle(); break;
        case 'Shift':      buttonDown("startButton"); break;
        case 'Control':    buttonDown("strictButton"); break;
    }
});

$(document).keyup(function(evt) {
    switch (evt.key) {
        case 'ArrowRight': playerPressUp("button0"); break; // yellow
        case 'ArrowDown':  playerPressUp("button1"); break; // blue
        case 'ArrowLeft':  playerPressUp("button2"); break; // red
        case 'ArrowUp':    playerPressUp("button3"); break; // green
        case 'Shift':      buttonUp("startButton"); break;
        case 'Control':    buttonUp("strictButton"); break;
    }
});
